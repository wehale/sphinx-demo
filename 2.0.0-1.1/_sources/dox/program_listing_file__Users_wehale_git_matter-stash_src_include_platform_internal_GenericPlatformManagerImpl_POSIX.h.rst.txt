
.. _program_listing_file__Users_wehale_git_matter-stash_src_include_platform_internal_GenericPlatformManagerImpl_POSIX.h:

Program Listing for File GenericPlatformManagerImpl_POSIX.h
===========================================================

|exhale_lsh| :ref:`Return to documentation for file <file__Users_wehale_git_matter-stash_src_include_platform_internal_GenericPlatformManagerImpl_POSIX.h>` (``/Users/wehale/git/matter-stash/src/include/platform/internal/GenericPlatformManagerImpl_POSIX.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
    *
    *    Copyright (c) 2020-2021 Project CHIP Authors
    *    Copyright (c) 2018 Nest Labs, Inc.
    *
    *    Licensed under the Apache License, Version 2.0 (the "License");
    *    you may not use this file except in compliance with the License.
    *    You may obtain a copy of the License at
    *
    *        http://www.apache.org/licenses/LICENSE-2.0
    *
    *    Unless required by applicable law or agreed to in writing, software
    *    distributed under the License is distributed on an "AS IS" BASIS,
    *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    *    See the License for the specific language governing permissions and
    *    limitations under the License.
    */
   
   #pragma once
   
   #include <platform/DeviceSafeQueue.h>
   #include <platform/internal/GenericPlatformManagerImpl.h>
   
   #include <fcntl.h>
   #include <sched.h>
   #include <sys/time.h>
   #include <unistd.h>
   
   #include <atomic>
   #include <pthread.h>
   #include <queue>
   
   namespace chip {
   namespace DeviceLayer {
   namespace Internal {
   
   template <class ImplClass>
   class GenericPlatformManagerImpl_POSIX : public GenericPlatformManagerImpl<ImplClass>
   {
   protected:
       // OS-specific members (pthread)
       pthread_mutex_t mChipStackLock = PTHREAD_MUTEX_INITIALIZER;
   
       enum class State
       {
           kStopped  = 0,
           kRunning  = 1,
           kStopping = 2,
       };
   
       pthread_t mChipTask;
       bool mInternallyManagedChipTask = false;
       std::atomic<State> mState{ State::kStopped };
       pthread_cond_t mEventQueueStoppedCond;
       pthread_mutex_t mStateLock;
   
       pthread_attr_t mChipTaskAttr;
       struct sched_param mChipTaskSchedParam;
   
   #if CHIP_STACK_LOCK_TRACKING_ENABLED
       bool mChipStackIsLocked = false;
       pthread_t mChipStackLockOwnerThread;
   #endif
   
       // ===== Methods that implement the PlatformManager abstract interface.
   
       CHIP_ERROR
       _InitChipStack();
       void _LockChipStack();
       bool _TryLockChipStack();
       void _UnlockChipStack();
       CHIP_ERROR _PostEvent(const ChipDeviceEvent * event);
       void _RunEventLoop();
       CHIP_ERROR _StartEventLoopTask();
       CHIP_ERROR _StopEventLoopTask();
       CHIP_ERROR _StartChipTimer(System::Clock::Timeout duration);
       void _Shutdown();
   
   #if CHIP_STACK_LOCK_TRACKING_ENABLED
       bool _IsChipStackLockedByCurrentThread() const;
   #endif
   
       // ===== Methods available to the implementation subclass.
   
   private:
       // ===== Private members for use by this class only.
   
       inline ImplClass * Impl() { return static_cast<ImplClass *>(this); }
   
       void ProcessDeviceEvents();
   
       DeviceSafeQueue mChipEventQueue;
       std::atomic<bool> mShouldRunEventLoop{ true };
       static void * EventLoopTaskMain(void * arg);
   };
   
   // Instruct the compiler to instantiate the template only when explicitly told to do so.
   extern template class GenericPlatformManagerImpl_POSIX<PlatformManagerImpl>;
   
   } // namespace Internal
   } // namespace DeviceLayer
   } // namespace chip
