
.. _program_listing_file__Users_wehale_git_matter-stash_src_include_platform_CommissionableDataProvider.h:

Program Listing for File CommissionableDataProvider.h
=====================================================

|exhale_lsh| :ref:`Return to documentation for file <file__Users_wehale_git_matter-stash_src_include_platform_CommissionableDataProvider.h>` (``/Users/wehale/git/matter-stash/src/include/platform/CommissionableDataProvider.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
    *
    *    Copyright (c) 2022 Project CHIP Authors
    *
    *    Licensed under the Apache License, Version 2.0 (the "License");
    *    you may not use this file except in compliance with the License.
    *    You may obtain a copy of the License at
    *
    *        http://www.apache.org/licenses/LICENSE-2.0
    *
    *    Unless required by applicable law or agreed to in writing, software
    *    distributed under the License is distributed on an "AS IS" BASIS,
    *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    *    See the License for the specific language governing permissions and
    *    limitations under the License.
    */
   #pragma once
   
   #include <lib/core/CHIPError.h>
   #include <lib/support/Span.h>
   
   namespace chip {
   
   // The largest value of the 12-bit Payload discriminator
   constexpr uint16_t kMaxDiscriminatorValue = 0xFFF;
   
   constexpr uint32_t kMinSetupPasscode = 1;
   constexpr uint32_t kMaxSetupPasscode = 0x5F5E0FE;
   
   namespace DeviceLayer {
   
   class CommissionableDataProvider
   {
   public:
       CommissionableDataProvider()          = default;
       virtual ~CommissionableDataProvider() = default;
   
       // Not copyable
       CommissionableDataProvider(const CommissionableDataProvider &) = delete;
       CommissionableDataProvider & operator=(const CommissionableDataProvider &) = delete;
   
       virtual CHIP_ERROR GetSetupDiscriminator(uint16_t & setupDiscriminator) = 0;
   
       virtual CHIP_ERROR SetSetupDiscriminator(uint16_t setupDiscriminator) = 0;
   
       virtual CHIP_ERROR GetSpake2pIterationCount(uint32_t & iterationCount) = 0;
   
       virtual CHIP_ERROR GetSpake2pSalt(MutableByteSpan & saltBuf) = 0;
   
       virtual CHIP_ERROR GetSpake2pVerifier(MutableByteSpan & verifierBuf, size_t & outVerifierLen) = 0;
   
       virtual CHIP_ERROR GetSetupPasscode(uint32_t & setupPasscode) = 0;
   
       virtual CHIP_ERROR SetSetupPasscode(uint32_t setupPasscode) = 0;
   };
   
   CommissionableDataProvider * GetCommissionableDataProvider();
   
   void SetCommissionableDataProvider(CommissionableDataProvider * provider);
   
   } // namespace DeviceLayer
   } // namespace chip
