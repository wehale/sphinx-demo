
.. _program_listing_file__Users_wehale_git_matter-stash_src_include_platform_CHIPDeviceEvent.h:

Program Listing for File CHIPDeviceEvent.h
==========================================

|exhale_lsh| :ref:`Return to documentation for file <file__Users_wehale_git_matter-stash_src_include_platform_CHIPDeviceEvent.h>` (``/Users/wehale/git/matter-stash/src/include/platform/CHIPDeviceEvent.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
    *
    *    Copyright (c) 2020 Project CHIP Authors
    *    Copyright (c) 2018 Nest Labs, Inc.
    *
    *    Licensed under the Apache License, Version 2.0 (the "License");
    *    you may not use this file except in compliance with the License.
    *    You may obtain a copy of the License at
    *
    *        http://www.apache.org/licenses/LICENSE-2.0
    *
    *    Unless required by applicable law or agreed to in writing, software
    *    distributed under the License is distributed on an "AS IS" BASIS,
    *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    *    See the License for the specific language governing permissions and
    *    limitations under the License.
    */
   
   #pragma once
   #include <stdint.h>
   
   #include <inet/IPAddress.h>
   #include <lib/core/DataModelTypes.h>
   
   namespace chip {
   namespace DeviceLayer {
   namespace DeviceEventType {
   
   enum
   {
       kFlag_IsPublic           = 0x8000,
       kFlag_IsPlatformSpecific = 0x4000,
       kFlag_Reserved1          = 0x2000,
       kFlag_Reserved2          = 0x1000,
       kMaxEventNum             = 0x0FFF,
   };
   
   enum EventTypeRanges
   {
       kRange_Public = kFlag_IsPublic,
   
       kRange_PublicPlatformSpecific = kFlag_IsPublic | kFlag_IsPlatformSpecific,
   
       kRange_Internal = 0,
   
       kRange_InternalPlatformSpecific = kFlag_IsPlatformSpecific,
   };
   
   inline bool IsPublic(uint16_t eventType)
   {
       return (eventType & kFlag_IsPublic) != 0;
   }
   inline bool IsInternal(uint16_t eventType)
   {
       return (eventType & kFlag_IsPublic) == 0;
   }
   inline bool IsPlatformSpecific(uint16_t eventType)
   {
       return (eventType & kFlag_IsPlatformSpecific) != 0;
   }
   inline bool IsPlatformGeneric(uint16_t eventType)
   {
       return (eventType & kFlag_IsPlatformSpecific) == 0;
   }
   
   enum PublicEventTypes
   {
       kWiFiConnectivityChange = kRange_Public,
   
       kThreadConnectivityChange,
   
       kInternetConnectivityChange,
   
       kServiceConnectivityChange,
   
       kServiceProvisioningChange,
   
       kTimeSyncChange,
   
       kSEDIntervalChange,
   
       kCHIPoBLEConnectionEstablished,
   
       kCHIPoBLEConnectionClosed,
   
       kThreadStateChange,
   
       kThreadInterfaceStateChange,
   
       kCHIPoBLEAdvertisingChange,
   
       kInterfaceIpAddressChanged,
   
       kCommissioningComplete,
   
       kFailSafeTimerExpired,
   
       kOperationalNetworkEnabled,
   
       kDnssdInitialized,
   
       kDnssdRestartNeeded,
   
       kBindingsChangedViaCluster,
   
       kOtaStateChanged,
   
       kServerReady,
   };
   
   enum InternalEventTypes
   {
       kEventTypeNotSet = kRange_Internal,
       kNoOp,
       kCallWorkFunct,
       kChipLambdaEvent,
       kChipSystemLayerEvent,
       kCHIPoBLESubscribe,
       kCHIPoBLEUnsubscribe,
       kCHIPoBLEWriteReceived,
       kCHIPoBLEIndicateConfirm,
       kCHIPoBLEConnectionError,
       kCHIPoBLENotifyConfirm
   };
   
   static_assert(kEventTypeNotSet == 0, "kEventTypeNotSet must be defined as 0");
   
   } // namespace DeviceEventType
   
   enum ConnectivityChange
   {
       kConnectivity_NoChange    = 0,
       kConnectivity_Established = 1,
       kConnectivity_Lost        = -1
   };
   
   enum class InterfaceIpChangeType
   {
       kIpV4_Assigned,
       kIpV4_Lost,
       kIpV6_Assigned,
       kIpV6_Lost,
   };
   
   enum ActivityChange
   {
       kActivity_NoChange = 0,
       kActivity_Started  = 1,
       kActivity_Stopped  = -1,
   };
   
   enum OtaState
   {
       kOtaSpaceAvailable = 0,
       kOtaDownloadInProgress,
       kOtaDownloadComplete,
       kOtaDownloadFailed,
       kOtaDownloadAborted,
       kOtaApplyInProgress,
       kOtaApplyComplete,
       kOtaApplyFailed,
   };
   
   inline ConnectivityChange GetConnectivityChange(bool prevState, bool newState)
   {
       if (prevState == newState)
           return kConnectivity_NoChange;
       if (newState)
           return kConnectivity_Established;
       return kConnectivity_Lost;
   }
   
   typedef void (*AsyncWorkFunct)(intptr_t arg);
   
   } // namespace DeviceLayer
   } // namespace chip
   
   /* Include a header file containing platform-specific event definitions.
    */
   #ifdef EXTERNAL_CHIPDEVICEPLATFORMEVENT_HEADER
   #include EXTERNAL_CHIPDEVICEPLATFORMEVENT_HEADER
   #elif defined(CHIP_DEVICE_LAYER_TARGET)
   #define CHIPDEVICEPLATFORMEVENT_HEADER <platform/CHIP_DEVICE_LAYER_TARGET/CHIPDevicePlatformEvent.h>
   #include CHIPDEVICEPLATFORMEVENT_HEADER
   #endif // defined(CHIP_DEVICE_LAYER_TARGET)
   
   #include <ble/BleConfig.h>
   #include <inet/InetInterface.h>
   #include <lib/support/LambdaBridge.h>
   #include <system/SystemEvent.h>
   #include <system/SystemLayer.h>
   #include <system/SystemPacketBuffer.h>
   
   namespace chip {
   namespace DeviceLayer {
   
   struct ChipDeviceEvent final
   {
       uint16_t Type;
   
       union
       {
           ChipDevicePlatformEvent Platform;
           LambdaBridge LambdaEvent;
           struct
           {
               AsyncWorkFunct WorkFunct;
               intptr_t Arg;
           } CallWorkFunct;
           struct
           {
               ConnectivityChange Result;
           } WiFiConnectivityChange;
           struct
           {
               ConnectivityChange Result;
           } ThreadConnectivityChange;
           struct
           {
               ConnectivityChange IPv4;
               ConnectivityChange IPv6;
               // WARNING: There used to be `char address[INET6_ADDRSTRLEN]` here and it is
               //          deprecated/removed since it was too large and only used for logging.
               //          Consider not relying on ipAddress field either since the platform
               //          layer *does not actually validate* that the actual internet is reachable
               //          before issuing this event *and* there may be multiple addresses
               //          (especially IPv6) so it's recommended to use `ChipDevicePlatformEvent`
               //          instead and do something that is better for your platform.
               chip::Inet::IPAddress ipAddress;
           } InternetConnectivityChange;
           struct
           {
               struct
               {
                   ConnectivityChange Result;
               } Overall;
               struct
               {
                   ConnectivityChange Result;
               } ViaThread;
           } ServiceConnectivityChange;
           struct
           {
               ConnectivityChange Result;
           } ServiceSubscriptionStateChange;
           struct
           {
               bool IsMemberOfFabric;
           } FabricMembershipChange;
           struct
           {
               bool IsServiceProvisioned;
               bool ServiceConfigUpdated;
           } ServiceProvisioningChange;
           struct
           {
               bool IsPairedToAccount;
           } AccountPairingChange;
           struct
           {
               bool IsTimeSynchronized;
           } TimeSyncChange;
           struct
           {
               uint64_t PeerNodeId;
               uint16_t SessionKeyId;
               uint8_t SessionType;
               bool IsCommissioner;
           } SessionEstablished;
           struct
           {
               BLE_CONNECTION_OBJECT ConId;
           } CHIPoBLESubscribe;
           struct
           {
               BLE_CONNECTION_OBJECT ConId;
           } CHIPoBLEUnsubscribe;
           struct
           {
               BLE_CONNECTION_OBJECT ConId;
               chip::System::PacketBuffer * Data;
           } CHIPoBLEWriteReceived;
           struct
           {
               BLE_CONNECTION_OBJECT ConId;
           } CHIPoBLEIndicateConfirm;
           struct
           {
               BLE_CONNECTION_OBJECT ConId;
               CHIP_ERROR Reason;
           } CHIPoBLEConnectionError;
           struct
           {
               BLE_CONNECTION_OBJECT ConId;
           } CHIPoBLENotifyConfirm;
           struct
           {
               bool RoleChanged : 1;
               bool AddressChanged : 1;
               bool NetDataChanged : 1;
               bool ChildNodesChanged : 1;
               struct
               {
                   uint32_t Flags;
               } OpenThread;
           } ThreadStateChange;
           struct
           {
               ActivityChange Result;
           } CHIPoBLEAdvertisingChange;
           struct
           {
               InterfaceIpChangeType Type;
           } InterfaceIpAddressChanged;
   
           struct
           {
               uint64_t nodeId;
               FabricIndex fabricIndex;
           } CommissioningComplete;
           struct
           {
               FabricIndex fabricIndex;
           } BindingsChanged;
   
           struct
           {
               FabricIndex fabricIndex;
               bool addNocCommandHasBeenInvoked;
               bool updateNocCommandHasBeenInvoked;
           } FailSafeTimerExpired;
   
           struct
           {
               // TODO(cecille): This should just specify wifi or thread since we assume at most 1.
               int network;
           } OperationalNetwork;
   
           struct
           {
               OtaState newState;
           } OtaStateChanged;
       };
   
       void Clear() { memset(this, 0, sizeof(*this)); }
       bool IsPublic() const { return DeviceEventType::IsPublic(Type); }
       bool IsInternal() const { return DeviceEventType::IsInternal(Type); }
       bool IsPlatformSpecific() const { return DeviceEventType::IsPlatformSpecific(Type); }
       bool IsPlatformGeneric() const { return DeviceEventType::IsPlatformGeneric(Type); }
   };
   
   } // namespace DeviceLayer
   } // namespace chip
