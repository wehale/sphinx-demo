
.. _program_listing_file__Users_wehale_git_matter-stash_src_include_platform_PlatformManager.h:

Program Listing for File PlatformManager.h
==========================================

|exhale_lsh| :ref:`Return to documentation for file <file__Users_wehale_git_matter-stash_src_include_platform_PlatformManager.h>` (``/Users/wehale/git/matter-stash/src/include/platform/PlatformManager.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
    *
    *    Copyright (c) 2020 Project CHIP Authors
    *    Copyright (c) 2018 Nest Labs, Inc.
    *
    *    Licensed under the Apache License, Version 2.0 (the "License");
    *    you may not use this file except in compliance with the License.
    *    You may obtain a copy of the License at
    *
    *        http://www.apache.org/licenses/LICENSE-2.0
    *
    *    Unless required by applicable law or agreed to in writing, software
    *    distributed under the License is distributed on an "AS IS" BASIS,
    *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    *    See the License for the specific language governing permissions and
    *    limitations under the License.
    */
   
   #pragma once
   
   #include <platform/AttributeList.h>
   #include <platform/CHIPDeviceBuildConfig.h>
   #include <platform/CHIPDeviceEvent.h>
   #include <system/PlatformEventSupport.h>
   #include <system/SystemLayer.h>
   
   namespace chip {
   
   namespace Dnssd {
   class DiscoveryImplPlatform;
   }
   
   namespace DeviceLayer {
   
   static constexpr size_t kMaxCalendarTypes = 12;
   
   class PlatformManagerImpl;
   class ConnectivityManagerImpl;
   class ConfigurationManagerImpl;
   class DeviceControlServer;
   class TraitManager;
   class ThreadStackManagerImpl;
   class TimeSyncManager;
   
   namespace Internal {
   class BLEManagerImpl;
   template <class>
   class GenericConfigurationManagerImpl;
   template <class>
   class GenericPlatformManagerImpl;
   template <class>
   class GenericPlatformManagerImpl_FreeRTOS;
   template <class>
   class GenericPlatformManagerImpl_POSIX;
   template <class>
   class GenericPlatformManagerImpl_Zephyr;
   template <class>
   class GenericConnectivityManagerImpl_Thread;
   template <class>
   class GenericThreadStackManagerImpl_OpenThread;
   template <class>
   class GenericThreadStackManagerImpl_OpenThread_LwIP;
   } // namespace Internal
   
   class PlatformManagerDelegate
   {
   public:
       virtual ~PlatformManagerDelegate() {}
   
       virtual void OnStartUp(uint32_t softwareVersion) {}
   
       virtual void OnShutDown() {}
   };
   
   class PlatformManager
   {
       using ImplClass = ::chip::DeviceLayer::PlatformManagerImpl;
   
   public:
       // ===== Members that define the public interface of the PlatformManager
   
       typedef void (*EventHandlerFunct)(const ChipDeviceEvent * event, intptr_t arg);
   
       CHIP_ERROR InitChipStack();
   
       CHIP_ERROR AddEventHandler(EventHandlerFunct handler, intptr_t arg = 0);
       void RemoveEventHandler(EventHandlerFunct handler, intptr_t arg = 0);
       void SetDelegate(PlatformManagerDelegate * delegate) { mDelegate = delegate; }
       PlatformManagerDelegate * GetDelegate() const { return mDelegate; }
   
       void HandleServerStarted();
   
       void HandleServerShuttingDown();
   
       CHIP_ERROR ScheduleWork(AsyncWorkFunct workFunct, intptr_t arg = 0);
   
       void RunEventLoop();
   
       CHIP_ERROR StartEventLoopTask();
   
       CHIP_ERROR StopEventLoopTask();
   
       void LockChipStack();
       bool TryLockChipStack();
       void UnlockChipStack();
       void Shutdown();
   
   #if CHIP_STACK_LOCK_TRACKING_ENABLED
       bool IsChipStackLockedByCurrentThread() const;
   #endif
   
       /*
        * PostEvent can be called safely on any thread without locking the stack.
        * When called from a thread that is not doing the stack work item
        * processing, the event might get dispatched (on the work item processing
        * thread) before PostEvent returns.
        */
       [[nodiscard]] CHIP_ERROR PostEvent(const ChipDeviceEvent * event);
       void PostEventOrDie(const ChipDeviceEvent * event);
   
       CHIP_ERROR ScheduleBackgroundWork(AsyncWorkFunct workFunct, intptr_t arg = 0);
   
       CHIP_ERROR PostBackgroundEvent(const ChipDeviceEvent * event);
   
       void RunBackgroundEventLoop();
   
       CHIP_ERROR StartBackgroundEventLoopTask();
   
       CHIP_ERROR StopBackgroundEventLoopTask();
   
   private:
       bool mInitialized                   = false;
       PlatformManagerDelegate * mDelegate = nullptr;
   
       // ===== Members for internal use by the following friends.
   
       friend class PlatformManagerImpl;
       friend class ConnectivityManagerImpl;
       friend class ConfigurationManagerImpl;
       friend class DeviceControlServer;
       friend class Dnssd::DiscoveryImplPlatform;
       friend class FailSafeContext;
       friend class TraitManager;
       friend class ThreadStackManagerImpl;
       friend class TimeSyncManager;
       friend class Internal::BLEManagerImpl;
       template <class>
       friend class Internal::GenericPlatformManagerImpl;
       template <class>
       friend class Internal::GenericPlatformManagerImpl_FreeRTOS;
       template <class>
       friend class Internal::GenericPlatformManagerImpl_POSIX;
       template <class>
       friend class Internal::GenericPlatformManagerImpl_Zephyr;
       template <class>
       friend class Internal::GenericConnectivityManagerImpl_Thread;
       template <class>
       friend class Internal::GenericThreadStackManagerImpl_OpenThread;
       template <class>
       friend class Internal::GenericThreadStackManagerImpl_OpenThread_LwIP;
       template <class>
       friend class Internal::GenericConfigurationManagerImpl;
       friend class System::PlatformEventing;
   
       void DispatchEvent(const ChipDeviceEvent * event);
       CHIP_ERROR StartChipTimer(System::Clock::Timeout duration);
   
   protected:
       // Construction/destruction limited to subclasses.
       PlatformManager()  = default;
       ~PlatformManager() = default;
   
       // No copy, move or assignment.
       PlatformManager(const PlatformManager &)  = delete;
       PlatformManager(const PlatformManager &&) = delete;
       PlatformManager & operator=(const PlatformManager &) = delete;
   };
   
   extern PlatformManager & PlatformMgr();
   
   extern PlatformManagerImpl & PlatformMgrImpl();
   
   class StackLock
   {
   public:
       StackLock() { PlatformMgr().LockChipStack(); }
   
       ~StackLock() { PlatformMgr().UnlockChipStack(); }
   };
   
   class StackUnlock
   {
   public:
       StackUnlock() { PlatformMgr().UnlockChipStack(); }
       ~StackUnlock() { PlatformMgr().LockChipStack(); }
   };
   
   } // namespace DeviceLayer
   } // namespace chip
   
   /* Include a header file containing the implementation of the ConfigurationManager
    * object for the selected platform.
    */
   #ifdef EXTERNAL_PLATFORMMANAGERIMPL_HEADER
   #include EXTERNAL_PLATFORMMANAGERIMPL_HEADER
   #elif defined(CHIP_DEVICE_LAYER_TARGET)
   #define PLATFORMMANAGERIMPL_HEADER <platform/CHIP_DEVICE_LAYER_TARGET/PlatformManagerImpl.h>
   #include PLATFORMMANAGERIMPL_HEADER
   #endif // defined(CHIP_DEVICE_LAYER_TARGET)
   
   namespace chip {
   namespace DeviceLayer {
   
   #if CHIP_STACK_LOCK_TRACKING_ENABLED
   inline bool PlatformManager::IsChipStackLockedByCurrentThread() const
   {
       return static_cast<const ImplClass *>(this)->_IsChipStackLockedByCurrentThread();
   }
   #endif
   
   inline CHIP_ERROR PlatformManager::InitChipStack()
   {
       // NOTE: this is NOT thread safe and cannot be as the chip stack lock is prepared by
       // InitChipStack itself on many platforms.
       //
       // In the future, this could be moved into specific platform code (where it can
       // be made thread safe). In general however, init twice
       // is likely a logic error and we may want to avoid that path anyway. Likely to
       // be done once code stabilizes a bit more.
       if (mInitialized)
       {
           return CHIP_NO_ERROR;
       }
   
       CHIP_ERROR err = static_cast<ImplClass *>(this)->_InitChipStack();
       mInitialized   = (err == CHIP_NO_ERROR);
       return err;
   }
   
   inline CHIP_ERROR PlatformManager::AddEventHandler(EventHandlerFunct handler, intptr_t arg)
   {
       return static_cast<ImplClass *>(this)->_AddEventHandler(handler, arg);
   }
   
   inline void PlatformManager::RemoveEventHandler(EventHandlerFunct handler, intptr_t arg)
   {
       static_cast<ImplClass *>(this)->_RemoveEventHandler(handler, arg);
   }
   
   inline void PlatformManager::HandleServerStarted()
   {
       static_cast<ImplClass *>(this)->_HandleServerStarted();
   }
   
   inline void PlatformManager::HandleServerShuttingDown()
   {
       static_cast<ImplClass *>(this)->_HandleServerShuttingDown();
   }
   
   inline CHIP_ERROR PlatformManager::ScheduleWork(AsyncWorkFunct workFunct, intptr_t arg)
   {
       return static_cast<ImplClass *>(this)->_ScheduleWork(workFunct, arg);
   }
   
   inline void PlatformManager::RunEventLoop()
   {
       static_cast<ImplClass *>(this)->_RunEventLoop();
   }
   
   inline CHIP_ERROR PlatformManager::StartEventLoopTask()
   {
       return static_cast<ImplClass *>(this)->_StartEventLoopTask();
   }
   
   inline CHIP_ERROR PlatformManager::StopEventLoopTask()
   {
       return static_cast<ImplClass *>(this)->_StopEventLoopTask();
   }
   
   inline void PlatformManager::Shutdown()
   {
       static_cast<ImplClass *>(this)->_Shutdown();
       mInitialized = false;
   }
   
   inline void PlatformManager::LockChipStack()
   {
       static_cast<ImplClass *>(this)->_LockChipStack();
   }
   
   inline bool PlatformManager::TryLockChipStack()
   {
       return static_cast<ImplClass *>(this)->_TryLockChipStack();
   }
   
   inline void PlatformManager::UnlockChipStack()
   {
       static_cast<ImplClass *>(this)->_UnlockChipStack();
   }
   
   inline CHIP_ERROR PlatformManager::PostEvent(const ChipDeviceEvent * event)
   {
       return static_cast<ImplClass *>(this)->_PostEvent(event);
   }
   
   inline void PlatformManager::PostEventOrDie(const ChipDeviceEvent * event)
   {
       CHIP_ERROR status = static_cast<ImplClass *>(this)->_PostEvent(event);
       VerifyOrDieWithMsg(status == CHIP_NO_ERROR, DeviceLayer, "Failed to post event %d: %" CHIP_ERROR_FORMAT,
                          static_cast<int>(event->Type), status.Format());
   }
   
   inline CHIP_ERROR PlatformManager::ScheduleBackgroundWork(AsyncWorkFunct workFunct, intptr_t arg)
   {
       return static_cast<ImplClass *>(this)->_ScheduleBackgroundWork(workFunct, arg);
   }
   
   inline CHIP_ERROR PlatformManager::PostBackgroundEvent(const ChipDeviceEvent * event)
   {
       return static_cast<ImplClass *>(this)->_PostBackgroundEvent(event);
   }
   
   inline void PlatformManager::RunBackgroundEventLoop()
   {
       static_cast<ImplClass *>(this)->_RunBackgroundEventLoop();
   }
   
   inline CHIP_ERROR PlatformManager::StartBackgroundEventLoopTask()
   {
       return static_cast<ImplClass *>(this)->_StartBackgroundEventLoopTask();
   }
   
   inline CHIP_ERROR PlatformManager::StopBackgroundEventLoopTask()
   {
       return static_cast<ImplClass *>(this)->_StopBackgroundEventLoopTask();
   }
   
   inline void PlatformManager::DispatchEvent(const ChipDeviceEvent * event)
   {
       static_cast<ImplClass *>(this)->_DispatchEvent(event);
   }
   
   inline CHIP_ERROR PlatformManager::StartChipTimer(System::Clock::Timeout duration)
   {
       return static_cast<ImplClass *>(this)->_StartChipTimer(duration);
   }
   
   } // namespace DeviceLayer
   } // namespace chip
