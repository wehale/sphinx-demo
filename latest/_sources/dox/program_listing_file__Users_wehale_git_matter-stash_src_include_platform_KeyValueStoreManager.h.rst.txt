
.. _program_listing_file__Users_wehale_git_matter-stash_src_include_platform_KeyValueStoreManager.h:

Program Listing for File KeyValueStoreManager.h
===============================================

|exhale_lsh| :ref:`Return to documentation for file <file__Users_wehale_git_matter-stash_src_include_platform_KeyValueStoreManager.h>` (``/Users/wehale/git/matter-stash/src/include/platform/KeyValueStoreManager.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
    *
    *    Copyright (c) 2021 Project CHIP Authors
    *
    *    Licensed under the Apache License, Version 2.0 (the "License");
    *    you may not use this file except in compliance with the License.
    *    You may obtain a copy of the License at
    *
    *        http://www.apache.org/licenses/LICENSE-2.0
    *
    *    Unless required by applicable law or agreed to in writing, software
    *    distributed under the License is distributed on an "AS IS" BASIS,
    *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    *    See the License for the specific language governing permissions and
    *    limitations under the License.
    */
   
   #pragma once
   
   #include <climits>
   #include <cstddef>
   #include <cstdint>
   #include <type_traits>
   
   #include <lib/core/CHIPError.h>
   #include <platform/CHIPDeviceBuildConfig.h>
   
   namespace chip {
   namespace DeviceLayer {
   namespace PersistedStorage {
   class KeyValueStoreManagerImpl;
   
   class KeyValueStoreManager
   {
   public:
       CHIP_ERROR Get(const char * key, void * buffer, size_t buffer_size, size_t * read_bytes_size = nullptr,
                      size_t offset_bytes = 0);
   
       template <typename T>
       CHIP_ERROR Get(const char * key, T * value)
       {
           static_assert(std::is_trivially_copyable<T>(), "KVS values must copyable");
           static_assert(!std::is_pointer<T>(), "KVS values cannot be pointers");
           static_assert(CHAR_BIT == 8, "Current implementation assumes 8 bit.");
           return Get(key, value, sizeof(T));
       }
   
       CHIP_ERROR Put(const char * key, const void * value, size_t value_size);
   
       template <typename T>
       CHIP_ERROR Put(const char * key, const T & value)
       {
           static_assert(std::is_trivially_copyable<T>(), "KVS values must copyable");
           static_assert(!std::is_pointer<T>(), "KVS values cannot be pointers");
           static_assert(CHAR_BIT == 8, "Current implementation assumes 8 bit.");
           return Put(key, &value, sizeof(T));
       }
   
       CHIP_ERROR Delete(const char * key);
   
   private:
       using ImplClass = ::chip::DeviceLayer::PersistedStorage::KeyValueStoreManagerImpl;
   
   protected:
       // Construction/destruction limited to subclasses.
       KeyValueStoreManager()  = default;
       ~KeyValueStoreManager() = default;
   
       // No copy, move or assignment.
       KeyValueStoreManager(const KeyValueStoreManager &)  = delete;
       KeyValueStoreManager(const KeyValueStoreManager &&) = delete;
       KeyValueStoreManager & operator=(const KeyValueStoreManager &) = delete;
   };
   
   extern KeyValueStoreManager & KeyValueStoreMgr();
   
   extern KeyValueStoreManagerImpl & KeyValueStoreMgrImpl();
   
   } // namespace PersistedStorage
   } // namespace DeviceLayer
   } // namespace chip
   
   /* Include a header file containing the implementation of the KeyValueStoreManager
    * object for the selected platform.
    */
   #ifdef EXTERNAL_KEYVALUESTOREMANAGERIMPL_HEADER
   #include EXTERNAL_KEYVALUESTOREMANAGERIMPL_HEADER
   #elif defined(CHIP_DEVICE_LAYER_TARGET)
   #define KEYVALUESTOREMANAGERIMPL_HEADER <platform/CHIP_DEVICE_LAYER_TARGET/KeyValueStoreManagerImpl.h>
   #include KEYVALUESTOREMANAGERIMPL_HEADER
   #endif // defined(CHIP_DEVICE_LAYER_TARGET)
   
   namespace chip {
   namespace DeviceLayer {
   namespace PersistedStorage {
   inline CHIP_ERROR KeyValueStoreManager::Put(const char * key, const void * value, size_t value_size)
   {
       return static_cast<ImplClass *>(this)->_Put(key, value, value_size);
   }
   
   inline CHIP_ERROR KeyValueStoreManager::Get(const char * key, void * buffer, size_t buffer_size, size_t * read_bytes_size,
                                               size_t offset_bytes)
   {
       return static_cast<ImplClass *>(this)->_Get(key, buffer, buffer_size, read_bytes_size, offset_bytes);
   }
   
   inline CHIP_ERROR KeyValueStoreManager::Delete(const char * key)
   {
       return static_cast<ImplClass *>(this)->_Delete(key);
   }
   
   } // namespace PersistedStorage
   } // namespace DeviceLayer
   } // namespace chip
