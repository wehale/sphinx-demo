
.. _program_listing_file__Users_wehale_git_matter-stash_src_include_platform_NetworkCommissioning.h:

Program Listing for File NetworkCommissioning.h
===============================================

|exhale_lsh| :ref:`Return to documentation for file <file__Users_wehale_git_matter-stash_src_include_platform_NetworkCommissioning.h>` (``/Users/wehale/git/matter-stash/src/include/platform/NetworkCommissioning.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
    *
    *    Copyright (c) 2021 Project CHIP Authors
    *
    *    Licensed under the Apache License, Version 2.0 (the "License");
    *    you may not use this file except in compliance with the License.
    *    You may obtain a copy of the License at
    *
    *        http://www.apache.org/licenses/LICENSE-2.0
    *
    *    Unless required by applicable law or agreed to in writing, software
    *    distributed under the License is distributed on an "AS IS" BASIS,
    *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    *    See the License for the specific language governing permissions and
    *    limitations under the License.
    */
   
   #pragma once
   
   #include <lib/core/CHIPCore.h>
   #include <lib/core/CHIPSafeCasts.h>
   #include <lib/core/Optional.h>
   #include <lib/support/ThreadOperationalDataset.h>
   #include <platform/internal/DeviceNetworkInfo.h>
   
   #include <app-common/zap-generated/cluster-enums.h>
   
   #include <limits>
   
   namespace chip {
   namespace DeviceLayer {
   namespace NetworkCommissioning {
   
   constexpr size_t kMaxNetworkIDLen = 32;
   
   // TODO: This is exactly the same as the one in GroupDataProvider, this could be moved to src/lib/support
   template <typename T>
   class Iterator
   {
   public:
       virtual ~Iterator() = default;
       virtual size_t Count() = 0;
       virtual bool Next(T & item) = 0;
       virtual void Release() = 0;
   
   protected:
       Iterator() = default;
   };
   
   // The following structs follows the generated cluster object structs.
   struct Network
   {
       uint8_t networkID[kMaxNetworkIDLen];
       uint8_t networkIDLen;
       bool connected;
   };
   
   static_assert(sizeof(Network::networkID) <= std::numeric_limits<decltype(Network::networkIDLen)>::max(),
                 "Max length of networkID ssid exceeds the limit of networkIDLen field");
   
   struct WiFiScanResponse
   {
   public:
       chip::BitFlags<app::Clusters::NetworkCommissioning::WiFiSecurity> security;
       uint8_t ssid[DeviceLayer::Internal::kMaxWiFiSSIDLength];
       uint8_t ssidLen;
       uint8_t bssid[6];
       uint16_t channel;
       app::Clusters::NetworkCommissioning::WiFiBand wiFiBand;
       int8_t rssi;
   };
   
   static_assert(sizeof(WiFiScanResponse::ssid) <= std::numeric_limits<decltype(WiFiScanResponse::ssidLen)>::max(),
                 "Max length of WiFi ssid exceeds the limit of ssidLen field");
   
   struct ThreadScanResponse
   {
       uint16_t panId;
       uint64_t extendedPanId;
       char networkName[16];
       uint8_t networkNameLen;
       uint16_t channel;
       uint8_t version;
       uint64_t extendedAddress;
       int8_t rssi;
       uint8_t lqi;
   };
   
   static_assert(sizeof(ThreadScanResponse::networkName) <= std::numeric_limits<decltype(ThreadScanResponse::networkNameLen)>::max(),
                 "Max length of WiFi credentials exceeds the limit of credentialsLen field");
   
   using NetworkIterator            = Iterator<Network>;
   using WiFiScanResponseIterator   = Iterator<WiFiScanResponse>;
   using ThreadScanResponseIterator = Iterator<ThreadScanResponse>;
   using Status                     = app::Clusters::NetworkCommissioning::NetworkCommissioningStatus;
   using WiFiBand                   = app::Clusters::NetworkCommissioning::WiFiBand;
   using WiFiSecurity               = app::Clusters::NetworkCommissioning::WiFiSecurity;
   
   // BaseDriver and WirelessDriver are the common interfaces for a network driver, platform drivers should not implement this
   // directly, instead, users are expected to implement WiFiDriver, ThreadDriver and EthernetDriver.
   namespace Internal {
   class BaseDriver
   {
   public:
       class NetworkStatusChangeCallback
       {
       public:
           virtual void OnNetworkingStatusChange(Status commissioningError, Optional<ByteSpan> networkId,
                                                 Optional<int32_t> connectStatus) = 0;
   
           virtual ~NetworkStatusChangeCallback() = default;
       };
   
       virtual CHIP_ERROR Init(NetworkStatusChangeCallback * networkStatusChangeCallback) { return CHIP_NO_ERROR; }
   
       virtual void Shutdown() {}
   
       virtual uint8_t GetMaxNetworks() = 0;
   
       virtual NetworkIterator * GetNetworks() = 0;
   
       virtual CHIP_ERROR SetEnabled(bool enabled) { return CHIP_ERROR_UNSUPPORTED_CHIP_FEATURE; }
   
       virtual bool GetEnabled() { return true; };
   
       virtual ~BaseDriver() = default;
   };
   
   class WirelessDriver : public Internal::BaseDriver
   {
   public:
       class ConnectCallback
       {
       public:
           virtual void OnResult(Status commissioningError, CharSpan debugText, int32_t connectStatus) = 0;
   
           virtual ~ConnectCallback() = default;
       };
   
       virtual CHIP_ERROR CommitConfiguration() = 0;
   
       virtual CHIP_ERROR RevertConfiguration() = 0;
   
       virtual uint8_t GetScanNetworkTimeoutSeconds()    = 0;
       virtual uint8_t GetConnectNetworkTimeoutSeconds() = 0;
   
       virtual Status RemoveNetwork(ByteSpan networkId, MutableCharSpan & outDebugText, uint8_t & outNetworkIndex) = 0;
   
       virtual Status ReorderNetwork(ByteSpan networkId, uint8_t index, MutableCharSpan & outDebugText) = 0;
   
       virtual void ConnectNetwork(ByteSpan networkId, ConnectCallback * callback) = 0;
   };
   } // namespace Internal
   
   class WiFiDriver : public Internal::WirelessDriver
   {
   public:
       class ScanCallback
       {
       public:
           virtual void OnFinished(Status status, CharSpan debugText, WiFiScanResponseIterator * networks) = 0;
   
           virtual ~ScanCallback() = default;
       };
   
       virtual Status AddOrUpdateNetwork(ByteSpan ssid, ByteSpan credentials, MutableCharSpan & outDebugText,
                                         uint8_t & outNetworkIndex) = 0;
   
       virtual void ScanNetworks(ByteSpan ssid, ScanCallback * callback) = 0;
   
       ~WiFiDriver() override = default;
   };
   
   class ThreadDriver : public Internal::WirelessDriver
   {
   public:
       class ScanCallback
       {
       public:
           virtual void OnFinished(Status err, CharSpan debugText, ThreadScanResponseIterator * networks) = 0;
   
           virtual ~ScanCallback() = default;
       };
   
       virtual Status AddOrUpdateNetwork(ByteSpan operationalDataset, MutableCharSpan & outDebugText, uint8_t & outNetworkIndex) = 0;
   
       virtual void ScanNetworks(ScanCallback * callback) = 0;
   
       ~ThreadDriver() override = default;
   };
   
   class EthernetDriver : public Internal::BaseDriver
   {
       // Ethernet driver does not have any special operations.
   };
   
   } // namespace NetworkCommissioning
   } // namespace DeviceLayer
   } // namespace chip
