
.. _program_listing_file__Users_wehale_git_matter-stash_src_include_platform_internal_GenericConnectivityManagerImpl_WiFi.h:

Program Listing for File GenericConnectivityManagerImpl_WiFi.h
==============================================================

|exhale_lsh| :ref:`Return to documentation for file <file__Users_wehale_git_matter-stash_src_include_platform_internal_GenericConnectivityManagerImpl_WiFi.h>` (``/Users/wehale/git/matter-stash/src/include/platform/internal/GenericConnectivityManagerImpl_WiFi.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
    *
    *    Copyright (c) 2020-2021 Project CHIP Authors
    *
    *    Licensed under the Apache License, Version 2.0 (the "License");
    *    you may not use this file except in compliance with the License.
    *    You may obtain a copy of the License at
    *
    *        http://www.apache.org/licenses/LICENSE-2.0
    *
    *    Unless required by applicable law or agreed to in writing, software
    *    distributed under the License is distributed on an "AS IS" BASIS,
    *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    *    See the License for the specific language governing permissions and
    *    limitations under the License.
    */
   
   #pragma once
   
   #include <lib/support/logging/CHIPLogging.h>
   #include <platform/ConnectivityManager.h>
   #include <platform/internal/DeviceNetworkInfo.h>
   
   namespace chip {
   namespace DeviceLayer {
   namespace Internal {
   
   template <class ImplClass>
   class GenericConnectivityManagerImpl_WiFi
   {
   public:
       // ===== Methods that implement the ConnectivityManager abstract interface.
   
       ConnectivityManager::WiFiStationMode _GetWiFiStationMode();
       CHIP_ERROR _SetWiFiStationMode(ConnectivityManager::WiFiStationMode val);
       bool _IsWiFiStationEnabled();
       bool _IsWiFiStationApplicationControlled();
       System::Clock::Timeout _GetWiFiStationReconnectInterval();
       CHIP_ERROR _SetWiFiStationReconnectInterval(System::Clock::Timeout val);
       bool _IsWiFiStationProvisioned();
       void _ClearWiFiStationProvision();
       ConnectivityManager::WiFiAPMode _GetWiFiAPMode();
       CHIP_ERROR _SetWiFiAPMode(ConnectivityManager::WiFiAPMode val);
       bool _IsWiFiAPActive();
       bool _IsWiFiAPApplicationControlled();
       void _DemandStartWiFiAP();
       void _StopOnDemandWiFiAP();
       void _MaintainOnDemandWiFiAP();
       System::Clock::Timeout _GetWiFiAPIdleTimeout();
       void _SetWiFiAPIdleTimeout(System::Clock::Timeout val);
       CHIP_ERROR _GetAndLogWiFiStatsCounters();
       bool _CanStartWiFiScan();
       void _OnWiFiScanDone();
       void _OnWiFiStationProvisionChange();
       static const char * _WiFiStationModeToStr(ConnectivityManager::WiFiStationMode mode);
       static const char * _WiFiAPModeToStr(ConnectivityManager::WiFiAPMode mode);
       static const char * _WiFiStationStateToStr(ConnectivityManager::WiFiStationState state);
       static const char * _WiFiAPStateToStr(ConnectivityManager::WiFiAPState state);
   
   protected:
       enum class ConnectivityFlags : uint16_t
       {
           kHaveIPv4InternetConnectivity = 0x0001,
           kHaveIPv6InternetConnectivity = 0x0002,
           kAwaitingConnectivity         = 0x0010,
       };
   
   private:
       ImplClass * Impl() { return static_cast<ImplClass *>(this); }
   };
   
   template <class ImplClass>
   inline System::Clock::Timeout GenericConnectivityManagerImpl_WiFi<ImplClass>::_GetWiFiStationReconnectInterval()
   {
       return System::Clock::kZero;
   }
   
   template <class ImplClass>
   inline CHIP_ERROR GenericConnectivityManagerImpl_WiFi<ImplClass>::_SetWiFiStationReconnectInterval(System::Clock::Timeout val)
   {
       return CHIP_ERROR_UNSUPPORTED_CHIP_FEATURE;
   }
   
   template <class ImplClass>
   inline bool GenericConnectivityManagerImpl_WiFi<ImplClass>::_IsWiFiStationProvisioned()
   {
       return false;
   }
   
   template <class ImplClass>
   inline void GenericConnectivityManagerImpl_WiFi<ImplClass>::_ClearWiFiStationProvision()
   {}
   
   template <class ImplClass>
   inline ConnectivityManager::WiFiAPMode GenericConnectivityManagerImpl_WiFi<ImplClass>::_GetWiFiAPMode()
   {
       return ConnectivityManager::kWiFiAPMode_NotSupported;
   }
   
   template <class ImplClass>
   inline CHIP_ERROR GenericConnectivityManagerImpl_WiFi<ImplClass>::_SetWiFiAPMode(ConnectivityManager::WiFiAPMode val)
   {
       return CHIP_ERROR_UNSUPPORTED_CHIP_FEATURE;
   }
   
   template <class ImplClass>
   inline bool GenericConnectivityManagerImpl_WiFi<ImplClass>::_IsWiFiAPActive()
   {
       return false;
   }
   
   template <class ImplClass>
   inline bool GenericConnectivityManagerImpl_WiFi<ImplClass>::_IsWiFiAPApplicationControlled()
   {
       return false;
   }
   
   template <class ImplClass>
   inline void GenericConnectivityManagerImpl_WiFi<ImplClass>::_DemandStartWiFiAP()
   {}
   
   template <class ImplClass>
   inline void GenericConnectivityManagerImpl_WiFi<ImplClass>::_StopOnDemandWiFiAP()
   {}
   
   template <class ImplClass>
   inline void GenericConnectivityManagerImpl_WiFi<ImplClass>::_MaintainOnDemandWiFiAP()
   {}
   
   template <class ImplClass>
   inline System::Clock::Timeout GenericConnectivityManagerImpl_WiFi<ImplClass>::_GetWiFiAPIdleTimeout()
   {
       return System::Clock::kZero;
   }
   
   template <class ImplClass>
   inline void GenericConnectivityManagerImpl_WiFi<ImplClass>::_SetWiFiAPIdleTimeout(System::Clock::Timeout val)
   {}
   
   template <class ImplClass>
   inline CHIP_ERROR GenericConnectivityManagerImpl_WiFi<ImplClass>::_GetAndLogWiFiStatsCounters()
   {
       return CHIP_ERROR_UNSUPPORTED_CHIP_FEATURE;
   }
   
   template <class ImplClass>
   inline bool GenericConnectivityManagerImpl_WiFi<ImplClass>::_CanStartWiFiScan()
   {
       return false;
   }
   
   template <class ImplClass>
   inline void GenericConnectivityManagerImpl_WiFi<ImplClass>::_OnWiFiScanDone()
   {}
   
   template <class ImplClass>
   inline void GenericConnectivityManagerImpl_WiFi<ImplClass>::_OnWiFiStationProvisionChange()
   {}
   
   } // namespace Internal
   } // namespace DeviceLayer
   } // namespace chip
