
.. _program_listing_file__Users_wehale_git_matter-stash_src_include_platform_internal_BLEManager.h:

Program Listing for File BLEManager.h
=====================================

|exhale_lsh| :ref:`Return to documentation for file <file__Users_wehale_git_matter-stash_src_include_platform_internal_BLEManager.h>` (``/Users/wehale/git/matter-stash/src/include/platform/internal/BLEManager.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
    *
    *    Copyright (c) 2020 Project CHIP Authors
    *    Copyright (c) 2018 Nest Labs, Inc.
    *
    *    Licensed under the Apache License, Version 2.0 (the "License");
    *    you may not use this file except in compliance with the License.
    *    You may obtain a copy of the License at
    *
    *        http://www.apache.org/licenses/LICENSE-2.0
    *
    *    Unless required by applicable law or agreed to in writing, software
    *    distributed under the License is distributed on an "AS IS" BASIS,
    *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    *    See the License for the specific language governing permissions and
    *    limitations under the License.
    */
   
   #pragma once
   
   #include <lib/support/CodeUtils.h>
   #include <platform/ConnectivityManager.h>
   
   #if CHIP_DEVICE_CONFIG_ENABLE_CHIPOBLE
   
   namespace chip {
   namespace DeviceLayer {
   namespace Internal {
   
   class BLEManagerImpl;
   
   class BLEManager
   {
       using ImplClass = BLEManagerImpl;
   
   public:
       // ===== Members that define the internal interface of the BLEManager
   
       using CHIPoBLEServiceMode = ConnectivityManager::CHIPoBLEServiceMode;
       using BLEAdvertisingMode  = ConnectivityManager::BLEAdvertisingMode;
   
       CHIP_ERROR Init();
       void Shutdown();
       bool IsAdvertisingEnabled();
       CHIP_ERROR SetAdvertisingEnabled(bool val);
       bool IsAdvertising();
       CHIP_ERROR SetAdvertisingMode(BLEAdvertisingMode mode);
       CHIP_ERROR GetDeviceName(char * buf, size_t bufSize);
       CHIP_ERROR SetDeviceName(const char * deviceName);
       uint16_t NumConnections();
       void OnPlatformEvent(const ChipDeviceEvent * event);
       chip::Ble::BleLayer * GetBleLayer();
   
   protected:
       // Construction/destruction limited to subclasses.
       BLEManager()  = default;
       ~BLEManager() = default;
   
       // No copy, move or assignment.
       BLEManager(const BLEManager &)  = delete;
       BLEManager(const BLEManager &&) = delete;
       BLEManager & operator=(const BLEManager &) = delete;
   };
   
   extern BLEManager & BLEMgr();
   
   extern BLEManagerImpl & BLEMgrImpl();
   
   } // namespace Internal
   } // namespace DeviceLayer
   } // namespace chip
   
   /* Include a header file containing the implementation of the BLEManager
    * object for the selected platform.
    */
   #ifdef EXTERNAL_BLEMANAGERIMPL_HEADER
   #include EXTERNAL_BLEMANAGERIMPL_HEADER
   #elif defined(CHIP_DEVICE_LAYER_TARGET)
   #define BLEMANAGERIMPL_HEADER <platform/CHIP_DEVICE_LAYER_TARGET/BLEManagerImpl.h>
   #include BLEMANAGERIMPL_HEADER
   #endif // defined(CHIP_DEVICE_LAYER_TARGET)
   
   namespace chip {
   namespace DeviceLayer {
   namespace Internal {
   
   inline CHIP_ERROR BLEManager::Init()
   {
       return static_cast<ImplClass *>(this)->_Init();
   }
   
   inline void BLEManager::Shutdown()
   {
   #if CONFIG_NETWORK_LAYER_BLE
       GetBleLayer()->Shutdown();
   #endif
       static_cast<ImplClass *>(this)->_Shutdown();
   }
   
   inline bool BLEManager::IsAdvertisingEnabled()
   {
       return static_cast<ImplClass *>(this)->_IsAdvertisingEnabled();
   }
   
   inline CHIP_ERROR BLEManager::SetAdvertisingEnabled(bool val)
   {
       return static_cast<ImplClass *>(this)->_SetAdvertisingEnabled(val);
   }
   
   inline bool BLEManager::IsAdvertising()
   {
       return static_cast<ImplClass *>(this)->_IsAdvertising();
   }
   
   inline CHIP_ERROR BLEManager::SetAdvertisingMode(BLEAdvertisingMode mode)
   {
       return static_cast<ImplClass *>(this)->_SetAdvertisingMode(mode);
   }
   
   inline CHIP_ERROR BLEManager::GetDeviceName(char * buf, size_t bufSize)
   {
       return static_cast<ImplClass *>(this)->_GetDeviceName(buf, bufSize);
   }
   
   inline CHIP_ERROR BLEManager::SetDeviceName(const char * deviceName)
   {
       return static_cast<ImplClass *>(this)->_SetDeviceName(deviceName);
   }
   
   inline uint16_t BLEManager::NumConnections()
   {
       return static_cast<ImplClass *>(this)->_NumConnections();
   }
   
   inline void BLEManager::OnPlatformEvent(const ChipDeviceEvent * event)
   {
       return static_cast<ImplClass *>(this)->_OnPlatformEvent(event);
   }
   
   inline chip::Ble::BleLayer * BLEManager::GetBleLayer()
   {
       return static_cast<ImplClass *>(this)->_GetBleLayer();
   }
   
   } // namespace Internal
   } // namespace DeviceLayer
   } // namespace chip
   
   #endif // CHIP_DEVICE_CONFIG_ENABLE_CHIPOBLE
